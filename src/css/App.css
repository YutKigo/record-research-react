.App {
  text-align: center;
}

/* メイン画面のスタイル 
------------------------------------------------------------ */
/* 画面全体 */
.container {
  display: flex;
  flex-direction: column;
}

.header {
  width: 100%;
  height: 8vh;
  background-color: white;
  box-sizing: border-box;
  /*border-radius: 10px;*/
  border-bottom: #c1c1c1 solid 1px;
  padding: auto;
  text-align: center;
  display: flex;             /* Flexboxレイアウトを有効にする */
  justify-content: flex-start;   /* 水平方向（主軸）の中央揃え */
  align-items: center;  
  margin: 5px 0; /* 上下のマージンを追加 */
  position: relative;
  z-index: 2;
}

.main {
  width: 100%;
  min-height: 92vh;
  display: flex;
  flex-direction: row;
  flex-grow: 1;
}

/* スクロールトップボタンのスタイル */
.scrollTopButton {
  display: flex;           /* Flexboxを有効にする */
  justify-content: center; /* 水平方向の中央揃え */
  align-items: center;     /* 垂直方向の中央揃え */
  
  position: fixed;
  right: 30px;
  bottom: 30px;
  z-index: 1000;
  cursor: pointer;
  
  width: 50px;
  height: 50px;
  opacity: 0.8;
  border-radius: 50%;
  border: none;
  background-color: #3f3f40;
  box-shadow: 0 2px 5px rgba(0,0,0,0.2);
  transition: opacity 0.3s, transform 0.3s;
}

.scrollTopButton:hover {
  opacity: 0.5;
  transform: scale(1.1);
}

/* ボタン内のアイコンのスタイル */
.scrollTopButton svg {
  color: white; /* アイコンの色 */
  font-size: 28px; /* アイコンのサイズ */
}


/* ユーザボタンのスタイル */
.user-menu-container {
  position: relative; /* ドロップダウンメニューの位置の基準 */
}

.user-icon-button {
  background: none;
  border: none;
  border-radius: 50%;
  padding: 10px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s;
  color: var(--vscode-foreground);
  font-size: x-large;
  z-index: 1001;
}

.user-icon-button:hover {
  color: rgb(163, 93, 1)
}
.user-icon-button:active {
  transform: scale(0.8);
}
.user-icon-button svg {
  width: 24px;
  height: 24px;
}

.dropdown-menu {
  position: absolute;
  top: 100%; /* ボタンのすぐ下に表示 */
  right: 0;
  background-color: white;
  border: 1px solid var(--vscode-panel-border);
  border-radius: 6px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  padding: 8px;
  width: 200px;
  min-width: max-content;
  z-index: 1001;
  animation: fadeIn 0.1s ease-out;
  text-align: left;
}

.dropdown-menu button {
  display: flex;
  align-items: center;
  gap: 10px;
  width: 100%;
  padding: 10px;
  background-color: transparent;
  border: none;
  color: var(--vscode-foreground);
  text-align: left;
  border-radius: 4px;
  cursor: pointer;
}

.dropdown-menu button:hover {
  background-color: var(--vscode-list-hoverBackground);
}

.dropdown-menu button svg {
  width: 18px;
  height: 18px;
}

.mode-toggle-container {
  position: absolute;
  display: flex;
  top: 9px;
  right: 55px;
}

.mode-toggle-button {
  background-color: white;
  border: none;
}
.mode-toggle-button:active {
  transform: scale(0.8);
}
.mode-toggle-icon {
  width: 24px;
  height: 24px;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}


/* アカウント表示 */
/* App.css または GlobalMode.css などに追加 */

/* ヘッダーのユーザーアイコンボタンに表示するアバター */
.user-icon-button .user-avatar {
  width: 32px;      /* ボタンのサイズに合わせる */
  height: 32px;
  border-radius: 50%; /* 画像を円形にする */
  object-fit: cover;  /* 画像のアスペクト比を保ちつつ、要素にフィットさせる */
}

/* ドロップダウンメニュー内のユーザー情報部分 */
.dropdown-menu .user-info {
  display: flex;
  align-items: center;
  gap: 10px; /* 画像とテキストの間隔 */
  padding: 8px 12px;
}

/* ドロップダウンメニュー内のアバター画像 */
.dropdown-menu .user-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
}

/* ドロップダウンメニュー内のデフォルトアイコンのサイズ調整 */
.dropdown-menu .user-avatar-icon {
  font-size: 40px;
  color: #555;
}

/* --- 画面切り替わるアニメーション --- */
/* --- ▼ アニメーション用のCSSを追加 ▼ --- */

/* main領域内のコンテンツを囲む親要素に適用します。
  これにより、子要素（SidebarやNoteContentなど）の切り替え時に
  トランジションが適用されるようになります。
*/
.main > * {
  /* opacity（透明度）の変化を0.3秒かけて行う設定 */
  transition: opacity 0.3s ease-in-out;
}

/* アニメーションの初期状態と最終状態を定義します。
  ReactがDOMを切り替える際に、一瞬で切り替わるのではなく
  このトランジションが適用されることで、滑らかな変化に見えます。
*/

/* フェードアウト用 (古いコンポーネントが消えるとき) */
.fade-out {
  opacity: 0;
}

/* フェードイン用 (新しいコンポーネントが現れるとき) */
.fade-in {
  opacity: 1;
}

/* コンポーネントを内包するdivに直接アニメーションを設定する方法も有効です。
  今回は<main>の直下の子要素( <></> で囲まれたコンポーネント群)に適用します。
*/
.main {
  position: relative; /* 子要素の配置の基準にする */
}

.main > div {
  animation: fadeInAnimation 0.5s ease-in-out;
}

@keyframes fadeInAnimation {
  0% {
    opacity: 0;
    transform: translateY(10px); /* 少し下から表示 */
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/* --- ▲ ここまで ▲ --- */